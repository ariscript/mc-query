#! /usr/bin/env python3

from argparse import ArgumentParser
from hashlib import sha1
from os import mkdir
from pathlib import Path
from signal import SIGINT, signal
from shutil import which
from subprocess import PIPE, run, Popen
from sys import argv, stderr, exit

JAR_URL = "https://piston-data.mojang.com/v1/objects/8f3112a1049751cc472ec13e397eade5336ca7ae/server.jar"
JAR_SHA1 = "8f3112a1049751cc472ec13e397eade5336ca7ae"

parser = ArgumentParser(description="mc-query test utility", prog=argv[0])
parser.add_argument(
    "--server-only", help="runs server only, without running cargo tests"
)
args = parser.parse_args()

if args.server_only:
    print("running server only, not cargo tests.")

print("ensuring server directory exists...")
if not Path("server").is_dir():
    mkdir("server")

print("checking for server.jar...")
if not Path("server/server.jar").is_file():
    print("server/server.jar not found... fetching server")
    run([which("curl"), JAR_URL, "-o", "server/server.jar"])
else:
    print("server.jar found. validating...")

sha1sum = sha1()
with open("server/server.jar", "rb") as f:
    block = f.read(2**16)
    while len(block) != 0:
        sha1sum.update(block)
        block = f.read(2**16)

if sha1sum.hexdigest() != JAR_SHA1:
    print("could not verify integrity of server.jar... exiting...", file=stderr)
    exit(1)

print("ensuring configuration files...")
with open("server/eula.txt", "w") as f:
    f.writelines(["eula=true"])

with open("server/server.properties", "w") as f, open(
    "resources/server.properties", "r"
) as source:
    f.write(source.read())

print("starting server...")
process = Popen(
    [which("java"), "-Xmx1G", "-jar", "server.jar", "nogui"],
    cwd="./server",
    stdin=PIPE,
    stdout=PIPE,
    stderr=PIPE,
    text=True,
)


def signal_handler(_s, _f):
    global process
    process.kill()


signal(SIGINT, signal_handler)

for line in process.stdout:
    print(f"server log: {line}", end="")
    if (not args.server_only) and "RCON running on 0.0.0.0:25575" in line:
        print("server RCON is ready, starting tests")
        break

if not args.server_only:
    run([which("cargo"), "test", "--", "--test-threads", "1", "--show-output"])

process.kill()
